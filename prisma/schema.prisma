// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String  @unique
  password  String
  role      String  @default("user")
  phone     String? @unique
  gender    Gender? 
  age       Int? 
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  room     Room?
  change_requests RoomRequest[]
  complaints Complaint[]
  replies   Reply[]

  @@map("users")
}

model RoomType {
  id        String   @id @default(cuid())
  name      String
  specification String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  rooms     Room[]

  @@map("room_types")
}

model Room {
  id          String   @id @default(cuid())
  name        String 
  type_id     String
  user_id     String?  @unique
  price       Int
  pictures    String?
  start_rent  DateTime?
  end_rent    DateTime?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  type        RoomType @relation(fields: [type_id], references: [id])
  user        User?    @relation(fields: [user_id], references: [id])
  change_requests RoomRequest[]
  complaints  Complaint[]

  @@map("rooms")
}

model RoomRequest {
  id          String   @id @default(cuid())
  room_id     String
  user_id     String
  reason      String?
  status      String   @default("pending")
  type        String   @default("change")
  start_rent  DateTime 
  end_rent    DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  room        Room     @relation(fields: [room_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])

  @@map("room_requests")
}

model Complaint {
  id          String   @id @default(cuid())
  user_id     String
  room_id     String
  reason      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user        User     @relation(fields: [user_id], references: [id])
  room        Room     @relation(fields: [room_id], references: [id])
  replies     Reply[]

  @@map("complaints")
}

model Reply {
  id         String   @id @default(cuid())
  complaint_id String 
  user_id    String
  message    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  complaint  Complaint @relation(fields: [complaint_id], references: [id])
  user       User      @relation(fields: [user_id], references: [id])

  @@map("replies")
}

enum Gender{
  M
  W
}
